// Copyright 2024, Evan Palmer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <realtime_tools/realtime_buffer.h>

#include <controller_interface/chainable_controller_interface.hpp>
#include <controller_interface/controller_interface.hpp>
#include <memory>
#include <rclcpp_lifecycle/state.hpp>
#include <vector>

// #include "hydrodynamics/hydrodynamics.hpp"
#include "geometry_msgs/msg/accel.hpp"
#include "geometry_msgs/msg/twist.hpp"
#include "rclcpp/rclcpp.hpp"
#include "velocity_controllers/visibility_control.h"

// auto-generated by generate_parameter_library
// #include "integral_sliding_mode_controller_parameters.hpp"

namespace velocity_controllers
{

class IntegralSlidingModeController : public controller_interface::ChainableControllerInterface
{
public:
  VELOCITY_CONTROLLERS_PUBLIC
  IntegralSlidingModeController();

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_init() override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_cleanup(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::return_type update_reference_from_subscribers(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  VELOCITY_CONTROLLERS_PUBLIC
  controller_interface::return_type update_and_write_commands(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

protected:
  bool on_set_chained_mode(bool chained_mode) override;

  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;

  // From the generate_parameter_library
  // std::shared_ptr<ParamListener> param_listener_;
  // integral_sliding_mode_controller::Params params_;

  realtime_tools::RealtimeBuffer<std::shared_ptr<geometry_msgs::msg::Twist>> reference_velocity_;
  rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr reference_velocity_subscriber_;

  realtime_tools::RealtimeBuffer<std::shared_ptr<geometry_msgs::msg::Twist>> velocity_state_;
  rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr velocity_state_subscriber_;

  geometry_msgs::msg::Accel::SharedPtr accel_state_;

private:
  VELOCITY_CONTROLLERS_LOCAL
  void reference_velocity_callback(const std::shared_ptr<geometry_msgs::msg::Twist> msg);
};

}  // namespace velocity_controllers
